# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# any commit to the master branch will trigger the CI build
trigger:
  branches:
    include:
    - master
    - releases/*
# use a Windows agent with VS to build the .NET Core MSTest project
# you can replace this with Ubuntu too without changing the tasks
pool:
  name: LocalWin10

variables:
  #buildConfiguration: 'Release'
  MSBUILDSINGLELOADCONTEXT: '1'

steps:
# install the required .NET Core SDK version
# only necessary if the agent doesn't already have the required SDK

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    includePreviewVersions: true

# restore Nuget packages/dependencies
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/googling/googling/googling.csproj'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '**/googling/googling/googling.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Run tests
  inputs:
    command: test
    projects: '**/googling/googling/googling.csproj'
    arguments: '--configuration $(buildConfiguration)'

# publish the UI test project to the SeleliumTest subfolder in the Artifact Staging Directory
# optionally, you can add more steps to publish your own website alongside your SeleniumTests in another task
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: '**/googling/googling/googling.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)/Google'
    zipAfterPublish: false
    modifyOutputPath: false

# publish all artifacts in the Artifact Stagign Directory
# this will place the UI Test artifacts in Azure DevOps for future use in the deployment pipeline
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()